#!/bin/bash

# Simple calculator
calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#						└─ default (when `--mathlib` is used) is 20

	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'		  `# add "0" for cases like ".5"` \
			-e 's/^-\./-0./'	  `# add "0" for cases like "-.5"`\
			-e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result"
	fi
	printf "\n"
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$@"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
	stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
	stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	)

	local cmd=""
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"
	echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Create a git.io short URL
gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`"
		return 1
	fi
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Compare original and gzipped file size
gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# Run `dig` and display the most useful info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Query Wikipedia via console over DNS
mwiki() {
	dig +short txt "$*".wp.dg.cx
}

# UTF-8-encode a string of Unicode symbols
escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Get a character’s Unicode code point
codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
		echo "Common Name:"
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo ""; # newline
		echo "Subject Alternative Name(s):"
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		xdg-open .	> /dev/null 2>&1
	else
		xdg-open "$@" > /dev/null 2>&1
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# Call from a local repo to open the repository on github/bitbucket in browser
repo() {
	local giturl=$(git config --get remote.origin.url | sed 's/git@/\/\//g' | sed 's/.git$//' | sed 's/https://g' | sed 's/:/\//g')
	if [[ $giturl == "" ]]; then
		echo "Not a git repository or no remote.origin.url is set."
	else
		local gitbranch=$(git rev-parse --abbrev-ref HEAD)
		local giturl="http:${giturl}"

		if [[ $gitbranch != "master" ]]; then
			local giturl="${giturl}/tree/${gitbranch}"
		fi

		echo $giturl
		open $giturl
	fi
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		man "$@"
}

# Use feh to nicely view images
openimage() {
	local types='*.jpg *.JPG *.png *.PNG *.gif *.GIF *.jpeg *.JPEG'

	cd $(dirname "$1")
	local file=$(basename "$1")

	feh -q $types --auto-zoom \
		--sort filename --borderless \
		--scale-down --draw-filename \
		--image-bg black \
		--start-at "$file"
}

# get dbus session
dbs() {
	local t=$1
	if [[  -z "$t" ]]; then
		local t="session"
	fi

	dbus-send --$t --dest=org.freedesktop.DBus \
		--type=method_call	--print-reply \
		/org/freedesktop/DBus org.freedesktop.DBus.ListNames
}

# check if uri is up
isup() {
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		notify-send --urgency=critical "$uri is down"
	else
		notify-send --urgency=low "$uri is up"
	fi
}

# build go static binary from root of project
gostatic(){
	local dir=$1
	local arg=$2

	if [[ -z $dir ]]; then
		dir=$(pwd)
	fi

	local name=$(basename "$dir")
	(
	cd $dir
	export GOOS=linux
	echo "Building static binary for $name in $dir"

	case $arg in
		"netgo")
			set -x
			go build -a \
				-tags 'netgo static_build' \
				-installsuffix netgo \
				-ldflags "-w" \
				-o "$name" .
			;;
		"cgo")
			set -x
			CGO_ENABLED=1 go build -a \
				-tags 'cgo static_build' \
				-ldflags "-w -extldflags -static" \
				-o "$name" .
			;;
		*)
			set -x
			CGO_ENABLED=0 go build -a \
				-installsuffix cgo \
				-ldflags "-w" \
				-o "$name" .
			;;
	esac
	)
}

# go to a folder easily in your gopath
gogo(){
	local d=$1

	if [[ -z $d ]]; then
		echo "You need to specify a project name."
		return 1
	fi

	if [[ "$d" = github* ]]; then
		d=$(echo $d | sed 's/.*\///')
	fi
	d=${d%/}

	# search for the project dir in the GOPATH
	local path=( `find "${GOPATH}/src" \( -type d -o -type l \) -iname "$d"  | awk '{print length, $0;}' | sort -n | awk '{print $2}'` )

	if [ "$path" == "" ] || [ "${path[*]}" == "" ]; then
		echo "Could not find a directory named $d in $GOPATH"
		echo "Maybe you need to 'go get' it ;)"
		return 1
	fi

	# enter the first path found
	cd "${path[0]}"
}

golistdeps(){
	(
	gogo $@

	go list -e -f '{{join .Deps "\n"}}' ./... | xargs go list -e -f '{{if not .Standard}}{{.ImportPath}}{{end}}'
	)
}

# get the name of a x window
xname(){
	local window_id=$1

	if [[ -z $window_id ]]; then
		echo "Please specifiy a window id, you find this with 'xwininfo'"

		return 1
	fi

	local match_string='".*"'
	local match_int='[0-9][0-9]*'
	local match_qstring='"[^"\\]*(\\.[^"\\]*)*"' # NOTE: Adds 1 backreference

	# get the name
	xprop -id $window_id | \
		sed -nr \
		-e "s/^WM_CLASS\(STRING\) = ($match_qstring), ($match_qstring)$/instance=\1\nclass=\3/p" \
		-e "s/^WM_WINDOW_ROLE\(STRING\) = ($match_qstring)$/window_role=\1/p" \
		-e "/^WM_NAME\(STRING\) = ($match_string)$/{s//title=\1/; h}" \
		-e "/^_NET_WM_NAME\(UTF8_STRING\) = ($match_qstring)$/{s//title=\1/; h}" \
		-e '${g; p}'
}


ex () {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xjf $1        ;;
             *.tar.gz)    tar xzf $1     ;;
             *.bz2)       bunzip2 $1       ;;
             *.rar)       rar x $1     ;;
             *.gz)        gunzip $1     ;;
             *.tar)       tar xf $1        ;;
             *.tbz2)      tar xjf $1      ;;
             *.tgz)       tar xzf $1       ;;
             *.zip)       unzip $1     ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1    ;;
             *)           echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

#netinfo - shows network information for your system
netinfo ()
{
echo "--------------- Network Information ---------------"
/sbin/ifconfig | awk /'inet addr/ {print $2}'
/sbin/ifconfig | awk /'Bcast/ {print $3}'
/sbin/ifconfig | awk /'inet addr/ {print $4}'
/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
myip=`lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' `
echo "${myip}"
echo "---------------------------------------------------"
}

#copy and go to dir
cpg (){
  if [ -d "$2" ];then
    cp $1 $2 && cd $2
  else
    cp $1 $2
  fi
}

#move and go to dir
mvg (){
  if [ -d "$2" ];then
    mv $1 $2 && cd $2
  else
    mv $1 $2
  fi
}

# Finds directory sizes and lists them
dirsize ()
{
	du -shx * .[a-zA-Z0-9_]* 2> /dev/null | \
	egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
	egrep '^ *[0-9.]*M' /tmp/list
	egrep '^ *[0-9.]*G' /tmp/list
	rm /tmp/list
}

# What's my IP?
myip ()
{
	lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | awk '{ print $4 }' | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g'
}

# back up .bash* files
backup_bashfiles()
{
	 ARCHIVE="$HOME/bash_dotfiles_$(date +%Y%m%d_%H%M%S).tar.gz";
	 cd ~
	 tar -czvf $ARCHIVE .bash_profile .bashrc .bash_functions .bash_aliases .bash_prompt
	 echo "All backed up in $ARCHIVE";
}

update_dotfiles()
{

	if [ -d '/tmp/dotfiles' ]; then
		rm -rf /tmp/dotfiles
	fi

	mkdir /tmp/dotfiles;
	cd /tmp/dotfiles;
	git clone https://github.com/AdamGreenhill/dotfiles
	cd dotfiles;
	\cp -rf .* ~ 2> /dev/null
	cd ~
	rm -rf /tmp/dotfiles

	if [ $BASH_VERSION ]; then
		`which bash`
	elif [ $ZSH_VERSION ]; then
		`which zsh`
	fi
}

create_venv() {

  sudo pip install virtualenv
  virtualenv venv
  source venv/bin/activate
}

setup_wm() {
  pacman -S ttf-hack
  
}

show_rupees()
{
 # Tips: use a font with an extended character set: DejuVu Sans, DejuVu Sans Mono, Awesome-Font, etc.
 # e.g printf '\33]50;%s\007' "xft:DejaVu Sans Mono:pixelsize=14"
	
  esc=""

  Bf="${esc}[30m";   rf="${esc}[31m";    gf="${esc}[32m"
  yf="${esc}[33m"   bf="${esc}[34m";   pf="${esc}[35m"
  cf="${esc}[36m";    wf="${esc}[37m"
  
  Bb="${esc}[40m";   rb="${esc}[41m";    gb="${esc}[42m"
  yb="${esc}[43m"   bb="${esc}[44m";   pb="${esc}[45m"
  cb="${esc}[46m";    wb="${esc}[47m"

  ON="${esc}[1m";    OFF="${esc}[22m"
  italicson="${esc}[3m"; italicsoff="${esc}[23m"
  ulon="${esc}[4m";      uloff="${esc}[24m"
  invon="${esc}[7m";     invoff="${esc}[27m"

  reset="${esc}[0m"

cat << EOF

                       ${Bf}██                               ${Bf}████                    ${Bf}████                    ${Bf}████                    ${Bf}████                    ${Bf}████
                     ${Bf}██${yf}██${Bf}██                           ${Bf}██${gf}${ON}██${OFF}██${Bf}██                ${Bf}██${bf}${ON}██${OFF}██${Bf}██                ${Bf}██${rf}${ON}██${OFF}██${Bf}██                ${Bf}██${pf}${ON}██${OFF}██${Bf}██                ${Bf}██${cf}${ON}██${OFF}██${Bf}██
                   ${Bf}██${yf}██████${Bf}██                       ${Bf}██${gf}${ON}████${OFF}████${Bf}██            ${Bf}██${bf}${ON}████${OFF}████${Bf}██            ${Bf}██${rf}${ON}████${OFF}████${Bf}██            ${Bf}██${pf}${ON}████${OFF}████${Bf}██            ${Bf}██${cf}${ON}████${OFF}████${Bf}██
                   ${Bf}██${yf}${ON}██${OFF}████${Bf}██                     ${Bf}██${gf}${ON}██████${OFF}██████${Bf}██        ${Bf}██${bf}${ON}██████${OFF}██████${Bf}██        ${Bf}██${rf}${ON}██████${OFF}██████${Bf}██        ${Bf}██${pf}${ON}██████${OFF}██████${Bf}██        ${Bf}██${cf}${ON}██████${OFF}██████${Bf}██
                 ${Bf}██${yf}██${ON}████${OFF}████${Bf}██                 ${Bf}██${gf}${ON}██${OFF}██${ON}██${OFF}██${Bf}██${gf}██${Bf}██${gf}██${Bf}██    ${Bf}██${bf}${ON}██${OFF}██${ON}██${OFF}██${Bf}██${bf}██${Bf}██${bf}██${Bf}██    ${Bf}██${rf}${ON}██${OFF}██${ON}██${OFF}██${Bf}██${rf}██${Bf}██${rf}██${Bf}██    ${Bf}██${pf}${ON}██${OFF}██${ON}██${OFF}██${Bf}██${pf}██${Bf}██${pf}██${Bf}██    ${Bf}██${cf}${ON}██${OFF}██${ON}██${OFF}██${Bf}██${cf}██${Bf}██${cf}██${Bf}██
                 ${Bf}██${yf}████${ON}██${OFF}████${Bf}██                 ${Bf}██${gf}${ON}████${OFF}██████${Bf}██${gf}████${Bf}██    ${Bf}██${bf}${ON}████${OFF}██████${Bf}██${bf}████${Bf}██    ${Bf}██${rf}${ON}████${OFF}██████${Bf}██${rf}████${Bf}██    ${Bf}██${pf}${ON}████${OFF}██████${Bf}██${pf}████${Bf}██    ${Bf}██${cf}${ON}████${OFF}██████${Bf}██${cf}████${Bf}██
               ${Bf}██${yf}██████${ON}████${OFF}████${Bf}██               ${Bf}██${gf}${ON}████${OFF}██████${Bf}██${gf}████${Bf}██    ${Bf}██${bf}${ON}████${OFF}██████${Bf}██${bf}████${Bf}██    ${Bf}██${rf}${ON}████${OFF}██████${Bf}██${rf}████${Bf}██    ${Bf}██${pf}${ON}████${OFF}██████${Bf}██${pf}████${Bf}██    ${Bf}██${cf}${ON}████${OFF}██████${Bf}██${cf}████${Bf}██
               ${Bf}██${yf}████████${ON}██${OFF}████${Bf}██               ${Bf}██${gf}${ON}████${OFF}██████${Bf}██${gf}████${Bf}██    ${Bf}██${bf}${ON}████${OFF}██████${Bf}██${bf}████${Bf}██    ${Bf}██${rf}${ON}████${OFF}██████${Bf}██${rf}████${Bf}██    ${Bf}██${pf}${ON}████${OFF}██████${Bf}██${pf}████${Bf}██    ${Bf}██${cf}${ON}████${OFF}██████${Bf}██${cf}████${Bf}██
             ${Bf}██████████████████████             ${Bf}██${gf}${ON}████${OFF}██████${Bf}██${gf}████${Bf}██    ${Bf}██${bf}${ON}████${OFF}██████${Bf}██${bf}████${Bf}██    ${Bf}██${rf}${ON}████${OFF}██████${Bf}██${rf}████${Bf}██    ${Bf}██${pf}${ON}████${OFF}██████${Bf}██${pf}████${Bf}██    ${Bf}██${cf}${ON}████${OFF}██████${Bf}██${cf}████${Bf}██
           ${Bf}██${yf}██${Bf}██              ██${yf}██${Bf}██           ${Bf}██${gf}${ON}████${OFF}██████${Bf}██${gf}████${Bf}██    ${Bf}██${bf}${ON}████${OFF}██████${Bf}██${bf}████${Bf}██    ${Bf}██${rf}${ON}████${OFF}██████${Bf}██${rf}████${Bf}██    ${Bf}██${pf}${ON}████${OFF}██████${Bf}██${pf}████${Bf}██    ${Bf}██${cf}${ON}████${OFF}██████${Bf}██${cf}████${Bf}██
         ${Bf}██${yf}██████${Bf}██          ██${yf}██████${Bf}██         ${Bf}██${gf}${ON}████${OFF}██████${Bf}██${gf}████${Bf}██    ${Bf}██${bf}${ON}████${OFF}██████${Bf}██${bf}████${Bf}██    ${Bf}██${rf}${ON}████${OFF}██████${Bf}██${rf}████${Bf}██    ${Bf}██${pf}${ON}████${OFF}██████${Bf}██${pf}████${Bf}██    ${Bf}██${cf}${ON}████${OFF}██████${Bf}██${cf}████${Bf}██   
         ${Bf}██${yf}██████${Bf}██          ██${yf}${ON}██${OFF}████${Bf}██         ${Bf}██${gf}${ON}██${OFF}██${ON}██${OFF}████${Bf}██${gf}████${Bf}██    ${Bf}██${bf}${ON}██${OFF}██${ON}██${OFF}████${Bf}██${bf}████${Bf}██    ${Bf}██${rf}${ON}██${OFF}██${ON}██${OFF}████${Bf}██${rf}████${Bf}██    ${Bf}██${pf}${ON}██${OFF}██${ON}██${OFF}████${Bf}██${pf}████${Bf}██    ${Bf}██${cf}${ON}██${OFF}██${ON}██${OFF}████${Bf}██${cf}████${Bf}██
       ${Bf}██${yf}██████████${Bf}██      ██${yf}██${ON}████${OFF}████${Bf}██       ${Bf}██${gf}██████${ON}██${OFF}${Bf}██${gf}██${Bf}██${gf}██${Bf}██    ${Bf}██${bf}██████${ON}██${OFF}${Bf}██${bf}██${Bf}██${bf}██${Bf}██    ${Bf}██${rf}██████${ON}██${OFF}${Bf}██${rf}██${Bf}██${rf}██${Bf}██    ${Bf}██${pf}██████${ON}██${OFF}${Bf}██${pf}██${Bf}██${pf}██${Bf}██    ${Bf}██${cf}██████${ON}██${OFF}${Bf}██${cf}██${Bf}██${cf}██${Bf}██
       ${Bf}██${yf}${ON}██${OFF}████████${Bf}██      ██${yf}████${ON}██${OFF}████${Bf}██         ${Bf}██${gf}████████████${Bf}██        ${Bf}██${bf}████████████${Bf}██        ${Bf}██${rf}████████████${Bf}██        ${Bf}██${pf}████████████${Bf}██        ${Bf}██${cf}████████████${Bf}██
     ${Bf}██${yf}██${ON}████${OFF}████████${Bf}██  ██${yf}██████${ON}████${OFF}████${Bf}██         ${Bf}██${gf}████████${Bf}██            ${Bf}██${bf}████████${Bf}██            ${Bf}██${rf}████████${Bf}██            ${Bf}██${pf}████████${Bf}██            ${Bf}██${cf}████████${Bf}██
     ${Bf}██${yf}████${ON}██${OFF}████████${Bf}██  ██${yf}████████${ON}██${OFF}████${Bf}██           ${Bf}██${gf}████${Bf}██                ${Bf}██${bf}████${Bf}██                ${Bf}██${rf}████${Bf}██                ${Bf}██${pf}████${Bf}██                ${Bf}██${cf}████${Bf}██
     ${Bf}██████████████████████████████████████             ${Bf}████                    ${Bf}████                    ${Bf}████                    ${Bf}████                    ${Bf}████${reset}

EOF
}

btsync(){
	drunning
	DATA_FOLDER=/docker/btsync
	WEBUI_PORT=8888

	mkdir -p $DATA_FOLDER

	docker run -d --name Sync \
  	-p 127.0.0.1:$WEBUI_PORT:8888 -p 55555 \
	-v $DATA_FOLDER:/mnt/sync \
	--restart on-failure \
  	bittorrent/sync
}
