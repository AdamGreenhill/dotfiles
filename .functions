#!/bin/bash

encrypt_file() {
	if [$# -ne 2]; then
		echo "encrypt_file <file> <password>"
	else
		pass="$2"
		echo "$pass" | whirlpooldeep | gpg --symmetric --armor --cipher-algo AES256 --passphrase-fd 0 $1
	fi
}

decrypt_file() {
	if [$# -ne 2]; then
		echo "decrypt_file <file> <password> <output file>"
	else
		pass="$2"
		echo "$pass" | whirlpooldeep | gpg -d --passphrase-fd 0 $1 > $3
	fi
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$@"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
	stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
	stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	)

	local cmd=""
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar using \`${cmd}\`â€¦"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"
	echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Run `dig` and display the most useful info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Query Wikipedia via console over DNS
mwiki() {
	dig +short txt "$*".wp.dg.cx
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}â€¦"
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
		echo "Common Name:"
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo ""; # newline
		echo "Subject Alternative Name(s):"
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		man "$@"
}

# get dbus session
dbs() {
	local t=$1
	if [[  -z "$t" ]]; then
		local t="session"
	fi

	dbus-send --$t --dest=org.freedesktop.DBus \
		--type=method_call	--print-reply \
		/org/freedesktop/DBus org.freedesktop.DBus.ListNames
}

# go to a folder easily in your gopath
gogo(){
	local d=$1

	if [[ -z $d ]]; then
		echo "You need to specify a project name."
		return 1
	fi

	if [[ "$d" = github* ]]; then
		d=$(echo $d | sed 's/.*\///')
	fi
	d=${d%/}

	# search for the project dir in the GOPATH
	local path=( `find "${GOPATH}/src" \( -type d -o -type l \) -iname "$d"  | awk '{print length, $0;}' | sort -n | awk '{print $2}'` )

	if [ "$path" == "" ] || [ "${path[*]}" == "" ]; then
		echo "Could not find a directory named $d in $GOPATH"
		echo "Maybe you need to 'go get' it ;)"
		return 1
	fi

	# enter the first path found
	cd "${path[0]}"
}

golistdeps(){
	(
	gogo $@

	go list -e -f '{{join .Deps "\n"}}' ./... | xargs go list -e -f '{{if not .Standard}}{{.ImportPath}}{{end}}'
	)
}

ex () {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xjf $1        ;;
             *.tar.gz)    tar xzf $1     ;;
             *.bz2)       bunzip2 $1       ;;
             *.rar)       rar x $1     ;;
             *.gz)        gunzip $1     ;;
             *.tar)       tar xf $1        ;;
             *.tbz2)      tar xjf $1      ;;
             *.tgz)       tar xzf $1       ;;
             *.zip)       unzip $1     ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1    ;;
             *)           echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

#netinfo - shows network information for your system
netinfo ()
{
echo "--------------- Network Information ---------------"
/sbin/ifconfig | awk /'inet addr/ {print $2}'
/sbin/ifconfig | awk /'Bcast/ {print $3}'
/sbin/ifconfig | awk /'inet addr/ {print $4}'
/sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
myip=`lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' `
echo "${myip}"
echo "---------------------------------------------------"
}

#copy and go to dir
cpg (){
  if [ -d "$2" ];then
    cp $1 $2 && cd $2
  else
    cp $1 $2
  fi
}

#move and go to dir
mvg (){
  if [ -d "$2" ];then
    mv $1 $2 && cd $2
  else
    mv $1 $2
  fi
}

# Finds directory sizes and lists them
dirsize ()
{
	du -shx * .[a-zA-Z0-9_]* 2> /dev/null | \
	egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
	egrep '^ *[0-9.]*M' /tmp/list
	egrep '^ *[0-9.]*G' /tmp/list
	rm /tmp/list
}

# What's my IP?
myip ()
{
	lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | awk '{ print $4 }' | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g'
}

update_dotfiles()
{

	if [ -d '/tmp/dotfiles' ]; then
		rm -rf /tmp/dotfiles
	fi

	mkdir /tmp/dotfiles;
	cd /tmp/dotfiles;
	git clone https://github.com/AdamGreenhill/dotfiles
	cd dotfiles;
	\cp -rf .* ~ 2> /dev/null
	cd ~
	rm -rf /tmp/dotfiles

	if [ $BASH_VERSION ]; then
		`which bash`
	elif [ $ZSH_VERSION ]; then
		`which zsh`
	fi
}

create_venv() {

  sudo pip install virtualenv
  virtualenv venv
  source venv/bin/activate
}

setup_wm() {
  pacman -S ttf-hack
  
}

show_rupees()
{
 # Tips: use a font with an extended character set: DejuVu Sans, DejuVu Sans Mono, Awesome-Font, etc.
 # e.g printf '\33]50;%s\007' "xft:DejaVu Sans Mono:pixelsize=14"
	
  esc=""

  Bf="${esc}[30m";   rf="${esc}[31m";    gf="${esc}[32m"
  yf="${esc}[33m"   bf="${esc}[34m";   pf="${esc}[35m"
  cf="${esc}[36m";    wf="${esc}[37m"
  
  Bb="${esc}[40m";   rb="${esc}[41m";    gb="${esc}[42m"
  yb="${esc}[43m"   bb="${esc}[44m";   pb="${esc}[45m"
  cb="${esc}[46m";    wb="${esc}[47m"

  ON="${esc}[1m";    OFF="${esc}[22m"
  italicson="${esc}[3m"; italicsoff="${esc}[23m"
  ulon="${esc}[4m";      uloff="${esc}[24m"
  invon="${esc}[7m";     invoff="${esc}[27m"

  reset="${esc}[0m"

cat << EOF

                       ${Bf}â–ˆâ–ˆ                               ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ                    ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ                    ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ                    ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ                    ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ
                     ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ                           ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ                ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ                ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ                ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ                ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ
                   ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ                       ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ            ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ            ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ            ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ            ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
                   ${Bf}â–ˆâ–ˆ${yf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ                     ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ        ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ        ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ        ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ        ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
                 ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆ${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ                 ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ
                 ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ                 ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
               ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ               ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
               ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ               ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
             ${Bf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ             ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
           ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ              â–ˆâ–ˆ${yf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ           ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
         ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ          â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ         ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ   
         ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ          â–ˆâ–ˆ${yf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ         ${Bf}â–ˆâ–ˆ${gf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
       ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ      â–ˆâ–ˆ${yf}â–ˆâ–ˆ${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ       ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ    ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆ${Bf}â–ˆâ–ˆ
       ${Bf}â–ˆâ–ˆ${yf}${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ      â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ         ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ        ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ        ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ        ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ        ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
     ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆ${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ  â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆâ–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ         ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ            ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ            ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ            ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ            ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
     ${Bf}â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ  â–ˆâ–ˆ${yf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ${ON}â–ˆâ–ˆ${OFF}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ           ${Bf}â–ˆâ–ˆ${gf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ                ${Bf}â–ˆâ–ˆ${bf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ                ${Bf}â–ˆâ–ˆ${rf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ                ${Bf}â–ˆâ–ˆ${pf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ                ${Bf}â–ˆâ–ˆ${cf}â–ˆâ–ˆâ–ˆâ–ˆ${Bf}â–ˆâ–ˆ
     ${Bf}â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ             ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ                    ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ                    ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ                    ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ                    ${Bf}â–ˆâ–ˆâ–ˆâ–ˆ${reset}

EOF
}

btsync(){
	drunning
	DATA_FOLDER=/docker/btsync
	WEBUI_PORT=8888

	mkdir -p $DATA_FOLDER

	docker run -d --name Sync \
  	-p 127.0.0.1:$WEBUI_PORT:8888 -p 55555 \
	-v $DATA_FOLDER:/mnt/sync \
	--restart on-failure \
  	bittorrent/sync
}

say() {
	command -v espeak >/dev/null 2>&1 || { echo >&2 "I require espeak but it's not installed.  Aborting."; exit 1; }
	espeak -v female3 -g 12 "$1" >> /dev/null 2>&1
}

install_vmwaretools() {
	mkdir /mnt/cdrom
	mount /dev/cdrom /mnt/cdrom
	cp /mnt/cdrom/VMwareTools* /tmp
	cd /tmp
	tar -zxvf VMwareTools*
	cd vmware-tools-distrib
	./vmware-install.pl --defaults
}

install_docker() {
	apt-get purge lxc-docker*
	apt-get purge docker.io*
	apt-get update
	apt-get install apt-transport-https ca-certificates
	apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
	
	# Debian Jessie
	echo "deb https://apt.dockerproject.org/repo debian-jessie main" > /etc/apt/sources.list.d/docker.list
	
	apt-get update
	apt-cache policy docker-engine
	apt-get update
	apt-get install docker-engine
	service docker start
	docker run hello-world
	
	curl -L https://github.com/docker/compose/releases/download/1.7.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
	
	chmod +x /usr/local/bin/docker-compose
}

install_golang() {
	wget https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz
	tar -C /usr/local -xzf go1.7.3.linux-amd64.tar.gz
	rm go1.7.3.linux-amd64.tar.gz
}

mount_shared_folders() {
	vmware-hgfsclient | while read folder; do
	  echo "[i] Mounting ${folder}   (/mnt/hgfs/${folder})"
	  mkdir -p "/mnt/hgfs/${folder}"
	  umount -f "/mnt/hgfs/${folder}" 2>/dev/null
	  vmhgfs-fuse -o allow_other -o auto_unmount ".host:/${folder}" "/mnt/hgfs/${folder}"
	done
}
