#!/bin/bash
# Bash wrappers for docker run commands


#
# Helper Functions
#
dcleanup(){
	sudo docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	sudo docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

drunning(){
	processes=`ps aux`

	if [[ $processes != *"docker daemon"* ]]
	then
		sudo docker daemon &
	fi
}

dbuild(){

	drunning
	sudo docker build `pwd`

}

dsetup_device() {
	if [ ! -c "$1" ]; then
		sudo mknod $1 c 81 0
		sudo chmod 666 $1
	fi
}

dsetup_display() {

	DISPLAY=:0.0; export DISPLAY;
	xhost +localhost;

}

del_stopped(){
	local name=$1
	local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm $name
	fi
}

django_bootstrap(){
	drunning
	sudo docker run -it --rm -v "$PWD":/usr/src/app -w /usr/src/app django django-admin.py startproject $1;
}

django_debug(){
	drunning
	sudo docker run -it -v "$PWD":/usr/src/app -w /usr/src/app -p 8000:8000 django bash
}

django_server(){
	drunning
	sudo docker run -v "$PWD":/usr/src/app -w /usr/src/app -p 8000:8000 -d django bash -c "pip install -r requirements.txt && python manage.py runserver 0.0.0.0:8000"
}

relies_on(){
	local containers=$@

	for container in $containers; do
		local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

#
# Container Aliases
#
aptfile_docker(){
	docker run --rm -it \
		--name apt-file \
		jess/apt-file
}
alias apt-file="apt_file"
aws_docker(){
	docker run -it --rm \
		-v $HOME/.aws:/root/.aws \
		--log-driver none \
		--name aws \
		jess/awscli "$@"
}

chrome_docker(){
	# add flags for proxy if passed
	local proxy=
	local map=
	local args=$@
	if [[ "$1" == "tor" ]]; then
		relies_on torproxy

		map="MAP * ~NOTFOUND , EXCLUDE torproxy"
		proxy="socks5://torproxy:9050"
		args="https://check.torproject.org/api/ip ${@:2}"
	fi

	drunning
	del_stopped chrome
	dsetup_display
	dsetup_device /dev/snd
	dsetup_device /dev/dri
	dsetup_device /dev/video0
	dsetup_device /dev/usb

	# one day remove /etc/hosts bind mount when effing
	# overlay support inotify, such bullshit
	docker run -d \
		--memory 3gb \
		--net host \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		-v $HOME/Downloads:/root/Downloads \
		-v $HOME/Pictures:/root/Pictures \
		-v $HOME/Torrents:/root/Torrents \
		-v $HOME/.chrome:/data \
		-v /dev/shm:/dev/shm \
		-v /etc/hosts:/etc/hosts \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--device /dev/usb \
		--device /dev/bus/usb \
		--group-add audio \
		--group-add video \
		--name chrome \
		jess/chrome --user-data-dir=/data --force-device-scale-factor=1 \
		--proxy-server="$proxy" --host-resolver-rules="$map" "$args"

}
# Tool for service discovery and configuration
consul_docker(){
	del_stopped consul

	# check if we passed args and if consul is running
	local args=$@
	local state=$(docker inspect --format "{{.State.Running}}" consul 2>/dev/null)
	if [[ "$state" == "true" ]] && [[ ! -z "$args" ]]; then
		docker exec -it consul consul "$@"
		return 0
	fi

	docker run -d \
		--restart always \
		-v $HOME/.consul:/etc/consul.d \
		-v /var/run/docker.sock:/var/run/docker.sock \
		--net host \
		-e GOMAXPROCS=2 \
		--name consul \
		jess/consul agent \
		-bootstrap-expect 1 \
		-config-dir /etc/consul.d \
		-data-dir /data \
		-encrypt $(docker run --rm jess/consul keygen) \
		-ui-dir /usr/src/consul \
		-server \
		-dc neverland \
		-bind 0.0.0.0

	sudo hostess add consul $(docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" consul)
	browser-exec "http://consul:8500"
}
firefox_docker(){

	drunning
	del_stopped firefox

	dsetup_display
	dsetup_device /dev/snd
	dsetup_device /dev/dri

	docker run -d \
		--memory 2gb \
		--net host \
		--cpuset-cpus 0 \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v $HOME/.firefox/cache:/root/.cache/mozilla \
		-v $HOME/.firefox/mozilla:/root/.mozilla \
		-v $HOME/Downloads:/root/Downloads \
		-v $HOME/Pictures:/root/Pictures \
		-v $HOME/Torrents:/root/Torrents \
		-e DISPLAY=unix$DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--device /dev/dri \
		--name firefox \
		jess/firefox "$@"

	# exit current shell
	exit 0
}

# hacker typing ++
hollywood_docker(){
	docker run --rm -it \
		--name hollywood \
		jess/hollywood
}

mysql_docker() {
  	drunning
	sudo docker run -d -p 3306:3306 -e MYSQL_PASS=$1 tutum/mysql
	echo "Access mysql with: mysql -h 127.0.0.1 -u admin -p <password>"
}

nes_docker(){
	del_stopped nes
	local game=$1

	docker run -d \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		--device /dev/dri \
		--device /dev/snd \
		--name nes \
		jess/nes /games/${game}.rom
}

popcorntime_docker() {

	drunning

	dsetup_display
	dsetup_device /dev/snd
	dsetup_device /dev/dri

	sudo docker run -it \
	--net host \
        --memory 512mb \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        --device /dev/snd \
        --device /dev/dri \
	jerivas/popcorntime \
        /opt/popcorntime/Popcorn-Time

        #    -e http_proxy=localhost:3128 \
}

# desktop slack app
slack(){
	del_stopped slack

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		-v /home/jessie/.slack:/root/.config/Slack \
		--name slack \
		jess/slack

	exit
}
spotify_docker(){
	del_stopped spotify

	dsetup_display

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		-e QT_DEVICE_PIXEL_RATIO \
		--device /dev/snd \
		--name spotify \
		jess/spotify
}

# terminal gameboy emulator
termboy_docker(){
	del_stopped termboy
	local game=$1

	docker run --rm -it \
		--device /dev/snd \
		--name termboy \
		jess/nes /games/${game}.rom
}
tor_docker(){
	del_stopped tor

	docker run -d \
		--net host \
		--name tor \
		jess/tor

	# set up the redirect iptables rules
	sudo setup-tor-iptables

	# validate we are running through tor
	browser-exec "https://check.torproject.org/"
}
torbrowser_docker(){
	del_stopped torbrowser

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--name torbrowser \
		jess/tor-browser

	# exit current shell
	exit 0
}
tormessenger_docker(){
	del_stopped tormessenger

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--name tormessenger \
		jess/tor-messenger

	# exit current shell
	exit 0
}
torproxy_docker(){
	del_stopped torproxy

	docker run -d \
		--restart always \
		-v /etc/localtime:/etc/localtime:ro \
		-p 9050:9050 \
		--name torproxy \
		jess/tor-proxy

	sudo hostess add torproxy $(docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" torproxy)
}

# torrent application
transmission_docker(){
	del_stopped transmission

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/Torrents:/transmission/download \
		-v $HOME/.transmission:/transmission/config \
		-p 9091:9091 \
		-p 51413:51413 \
		-p 51413:51413/udp \
		--name transmission \
		jess/transmission
}

vagrant_docker(){
	del_stopped vagrant

	# modprobe the module
	sudo modprobe vboxdrv

	docker run -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e DISPLAY=unix$DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--name vagrant \
		--net host \
		-v "$HOME/.vbox/vms:/root/VirtualBox VMs" \
		-v $HOME/.vbox/config:/root/.config/VirtualBox \
		-v $HOME/oscon:/root/oscon \
		--privileged \
		--entrypoint bash \
		jess/vagrant
}

virtualbox_docker(){
	del_stopped virtualbox

	# modprobe the module
	sudo modprobe vboxdrv
	# and the extras for networking
	sudo insmod /lib/modules/$(uname -r)/misc/vboxnet*.ko

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e DISPLAY=unix$DISPLAY \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--name virtualbox \
		--net host \
		-v "$HOME/.vbox/vms:/root/VirtualBox VMs" \
		-v $HOME/.vbox/config:/root/.config/VirtualBox \
		--privileged \
		jess/virtualbox
}

# monitors files and performs actions when they change
watchman_docker(){
	del_stopped watchman

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/Downloads:/root/Downloads \
		--name watchman \
		jess/watchman --foreground
}

###
### Awesome sauce by @jpetazzo
###
command_not_found_handle () {
	# Check if there is a container image with that name
	if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null ; then
		echo "$0: $1: command not found"
		return
	fi

	# Check that it's really the name of the image, not a prefix
	if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ; then
		echo "$0: $1: command not found"
		return
	fi

	docker run -ti -u $(whoami) -w "$HOME" \
		$(env | cut -d= -f1 | awk '{print "-e", $1}') \
		--device /dev/snd \
		-v /etc/passwd:/etc/passwd:ro \
		-v /etc/group:/etc/group:ro \
		-v /etc/localtime:/etc/localtime:ro \
		-v /home:/home \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		"jess/$@"
}
